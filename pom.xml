<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.5.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <groupId>rocks.metal-detector</groupId>
    <artifactId>metal-detector</artifactId>
    <version>0.0.1</version>
    <packaging>pom</packaging>
    <name>metal-detector</name>
    <description>Mark your favourite bands and get informed about their new releases.</description>

    <modules>
        <module>discogs</module>
        <module>webapp</module>
        <module>persistence</module>
        <module>spotify</module>
        <module>support</module>
        <module>butler</module>
    </modules>

    <developers>
        <developer>
            <id>danielw</id>
            <name>Daniel Wagner</name>
            <email>wagner.daniel87@gmail.com</email>
            <roles>
                <role>Developer</role>
                <role>Deployment Engineer</role>
            </roles>
            <timezone>Germany/Berlin</timezone>
        </developer>
        <developer>
            <id>nilsd</id>
            <name>Nils Dammenhayn</name>
            <email>nilsdam@aol.com</email>
            <roles>
                <role>Developer</role>
            </roles>
            <timezone>Germany/Berlin</timezone>
        </developer>
    </developers>

    <properties>
        <java.version>15</java.version>
        <junit-jupiter.version>5.7.0</junit-jupiter.version>
        <mockito.version>3.1.0</mockito.version>
        <coveralls-plugin.version>4.3.0</coveralls-plugin.version>
        <jaxb-api.version>2.3.1</jaxb-api.version>
        <jacoco.version>0.8.6</jacoco.version>
        <apache-commons-text.version>1.9</apache-commons-text.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>

        <!-- Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Util -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>


        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>${junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-text</artifactId>
                <version>${apache-commons-text.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <release>${java.version}</release>
                </configuration>
            </plugin>
            <!-- Maven surefire plugin comes in by default. The Plugin runs all unit tests via maven phase 'test' and skips -->
            <!-- all test classes that end with 'IT' (Integration Tests). To execute heavyweight integration tests after -->
            <!-- unit tests you need maven failsafe plugin. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.0.0-M4</version>
                <executions>
                    <execution>
                        <goals>
                            <!-- execute integration tests in phase integration-test (in terminal 'mvn integration-test') -->
                            <goal>integration-test</goal>

                            <!-- execute integration tests also in phase verify (default behaviour)-->
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- JaCoCo is a free code coverage library for Java. It records which parts of your Java code are executed during a        -->
            <!-- particular program launch. This technique is called code coverage analysis and typically used with automated           -->
            <!-- testing like JUnit unit tests. It helps to identify untested parts of a code base and improve the corresponding tests. -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
